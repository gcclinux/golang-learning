# GOLANG-LEARNING #

# Useful alias for pushing code easy on Linux or Mac #

alias ghpush='git add . && git commit -m "$(date)" && git branch -M main && git push -u origin main'

$ Linux edit ~/.bashrc && source ~/.bashrc
$ Mac edit ~/.zshrc && source ~/.zshrc

# Install Git-bash as terminal for Windows
# Install go from https://go.dev/dl/
# Install Visual Studio for any platform
# After Visual Studio installed need to intall Go modules
	Crtl + Shift + P 
	> Go: Install/update (select all)

# Create Project folder

# Enter project folder via Git-Bash command line
# Get your GOPATH by following command 
	$ echo $GOPTAH
# Initiate Go modules in project folder
	$ go mod init 'myapp'  'name of your application or location like github.com/user/myapp'

# Opening Settings short cup
	Crtl + ,
	File --> Preferences --> Settings
	# Update Settings
		"terminal.integrated.defaultProfile.windows": "Git Bash",
		"terminal.external.windowsExec": "C:\\Program Files\\Git\\git-bash.exe",
		"terminal.integrated.cwd": "C:\\Users\\ricar\\Desktop\\Nextcloud\\Programming\\GitServer\\golang",

# Download godoc modules for references
	$ go get golang.org/x/tools/cmd/godoc
	$ go install golang.org/x/tools/cmd/godoc
# To view godoc initial webserver
	$ godoc --http=:6060
# Open favour browser browser and open URL
	http://localhost:6060
# Very first line in all GO files start with package
	package main
# Every main package has to have a function called main
	func main() {

	}
# Example of Hello world in main function
	package main

	import "fmt"

	func main() {
		fmt.Println("Hello World!")
	}

# Run go program through Git-Bash command
	$ go run helloWorld/main.go 

# BUILD a go executable program through Git-Bash command
	$ go build -o hello.exe helloWorld/main.go

# Variables known as short and operators

	## Standard string varible....
	var sayWhat string
	sayWhat = "Hello World, through function & variable"

	## Short hand string varible.
	sayWhat := "Hello World, through function & short hand variable !!!"
	sayHelloWorld(sayWhat)

	## private vs Public
	var privateVar = "I am private"                // started with lowecase to be private
	var PublicVar = "I am public (or exported)"    // started with UPPER case to be public

# string array in GO is called [] slice to a slice of string
# 2d array in GO is called MAP to store key & values

# Const is constant varible outside of the function and can never change or never has to be used

# Scope refer to wher ein your program that you have declared a varible

# accessing Public vs private functions.

	func notExported(){
		//Start with lower case can not be accessed
	}

	func Exported() {
		// Starts with Upper case so ti CAN be accessed
	}

# Lesson 20 using 3rd party package

# Ignore the second inut "error" fromt he function with " _ " 
	userInput, _ := reader.ReadString('\n')
# Delete new line from string for windows -1 = everywhere
	userInput = strings.Replace(userInput, "\r\n", "", -1)
# delete new line from string for unix/linux/darwin -1 = everywhere
	userInput = strings.Replace(userInput, "\n", "", -1)   //


# MAP is a data structure that has a index & a value (String Array)
	coffees := make(map[int]string)
	coffees[1] = "Cappucino"
	coffees[2] = "Latte"
	coffees[3] = "Americano"
	coffees[4] = "Mocha"
	coffees[5] = "Macchiato"
	coffees[6] = "Espresso"

# Saved in string-interpolation find file fmt-printing-cheatsheet.pdf

# String-challenge code has example of bool YES or NO

## Section 4: Types, Expressions and Composition

## TYPES
# Basic types - numbers, strings, booleans
# Aggredate types - arrays, structs
# Reference types - Pointers, slices, maps, fucntions, channels
 -> SLICES are arrays with additional functionalities 
# Interface type 

## EXPRESSIONS
# Boolean if 
# Compound boolean if 
# Switch()

## COMPOSITION
# Composition vs Inheritance
# Go is not OOP 
# Example: car in OOP, car with Composition

###### Chapter 4 summary ######

Basic types - int, float32, float64, boolean string rune
Aggredate types - arrays, structs
Reference types - pointers, slices, maps, function, channels
Interface types

In order to implement an interfac, a type must implement all of the methods of that Interface

Boolean expressions - false, num > 10, == / != / > / < / >= / <=

Compound booleans - (x > 10) && ( y < 20)

Composition - embedding types in types

Exported vs Unexported - capitalization matters for:
* packages level constants
* package level variables
* functions
* types


So we covered a fair bit of material in this section.
And I'd like to just go over and summarize the key points that we made in each of the lessons.
So we went through all of the types in go or not all of the types, but all of the important types
And there are many more, but these are the ones you'll run into for the most part.
So we covered basic types, which include ints, which can just hold whole numbers.
There was also uint for unsigned integers 0 or greater;
float 32 and float 64, which hold floating point numbers;
the Boolean, which can just be true or false;
strings, which are characters surrounded by either double quotes or the backticks;
and the rune, which are individual characters used to make up strings.
We also went through the aggregate types, including arrays which you don't use very often in go, but they do exist; and structs,
which are types that we define ourselves.
So a variable that can hold members, and it can hold members of any other type including other structs.
We also looked at reference types, which include pointers, which begin with an asterisk to point to the memory address,
and you dereference them by using the ampersand.
We also looked at slices, which are sort of like arrays with a lot of additional functionality;
maps, which are a key value data structure that allow you to store things by a key
and get its value by looking it up by that key;
functions, which we've seen many times; and channels, which are pipes used to connect one go routine
to another go routine, so you can pass data back and forth.
Then we looked at the interface type, and we also explored how you implement an interface.
And in go, a type implements an interface simply by implementing all of the methods that the interface has.
Then we spent some time looking at Boolean expressions. For example, false or num is greater than 10.
And we looked at the Boolean operators the double equals sign, which is for equality,
the exclamation mark equals, which means not equal to;
greater than less than greater than equal to and less than and equal to.
We also looked at compound Booleans, which we have an example right here, x is greater than 10 and y is less than 20
or we could put x is greater than 10 or y is less than 20.
And the double pipe the vertical bar is the or operator.
We looked at composition one of go's most powerful features, where you can embed types in types and have access to
the embedded types members and functions.
And then finally, we looked at exported versus unexported, where capitalization matters for package level constants, package level variables,
functions and types.
And in the next section, we'll be moving on to look at the for loops and the various kinds of for loops we have in go
as well as some additional decision structures.


Section 5 - 47 Three Part Loop

Execute one section of code a set number of times
Execute one section of code based on a condition
for loop in more details
	* three componet loop
	* while loop
	* infinite loop
	* for each range
	* getting out of a loop

But the Go authors decided to make things as simple as they possibly could.
So, there was only one kind of loop in go - the for loop.
Having said that, the for loop will actually do exactly the same thing that a do while, or a while loop does in other languages.
So, we'll look at the three component loop.

Making decisions

if/then/else
Switch

Debugging

using dlv, the go debugger
setting break points
stepping through our code

-> Did not see the point of Section 5 - 54 Understanding more about Eliza

Section 60 - decisions

if/else
switch
select

Usinhg the sprintf, which I don't think you've seen yet, this is actually a built-in function in the format package
that doesn't print things to the screen. Instead, it returns a string,

--> Lesson 71 operator
In go, as is the case in java and c-sharp and lots of other languages,we follow the normal order of operations, 
which is to say do multiplication and division first then do addition and subtraction.

--> Lesson 73 Precedence
So parentheses first, then multiplication and division and then addition and subtraction.



######################
# AREK STOP AT 25
# RICO START Lesson 84 more String manipulation
######################
